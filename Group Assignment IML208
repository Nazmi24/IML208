import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import simpledialog
from tkinter import scrolledtext
import sqlite3
from ttkthemes import ThemedTk, ThemedStyle

def library():
    def login():
        username = username_entry.get()
        password = password_entry.get()

        if username == "admin" and password == "12345":
            admin_window()
        elif username != "" and password != "":
            non_admin_window()
        else:
            messagebox.showerror("Error", "Invalid username or password")

    def admin_window():
        global current_page, current_theme_index

        root = ThemedTk(theme="equilux")
        root.title("Library Window")
        root.configure(bg="#3b3b3b")

        style = ttk.Style(root)
        style.configure("TLabel", foreground="white", background="#3b3b3b")
        style.configure("TButton", foreground="white", background="#3b3b3b")
        style.configure("TEntry", foreground="white", background="#3b3b3b")

        button_frame = ttk.Frame(root, padding=20)
        button_frame.pack()

        themes = ['equilux', 'arc', 'plastik', 'adapta', 'scidgrey', 'radiance', 'clearlooks', 'keramik']
        current_theme_index = 0
        style = ThemedStyle(root)
        style.theme_use("equilux")

        tree = None
        page_size = 50
        current_page = 1
        total_pages = 0

        def display_books():
            global tree, current_page, total_pages, books_window

            if 'books_window' in globals() and books_window.winfo_exists(): # type: ignore
                books_window.destroy() # type: ignore

            books_window = tk.Toplevel(root)
            books_window.title("Book Information")

            conn = sqlite3.connect('books.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM books")
            total_books = cursor.fetchone()[0]
            total_pages = (total_books + page_size - 1) // page_size
            start_index = (current_page - 1) * page_size
            end_index = start_index + page_size
            cursor.execute("SELECT * FROM books LIMIT ?, ?", (start_index, page_size))
            book_data = cursor.fetchall()
            conn.close()

            book_data = [(book[0], book[1], book[2], book[3], book[4], '') if len(book) == 5 else book for book in book_data]

            scrollbar = ttk.Scrollbar(books_window)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

            tree = ttk.Treeview(books_window, columns=("ISBN", "Book_Title", "Book_Author", "Year_Of_Publication", "Publisher", "Borrower"), yscrollcommand=scrollbar.set)

            tree.column("#0", width=0, stretch=tk.NO)
            tree.column("ISBN", width=100, anchor=tk.CENTER)
            tree.column("Book_Title", width=300, anchor=tk.W)
            tree.column("Book_Author", width=200, anchor=tk.W)
            tree.column("Year_Of_Publication", width=150, anchor=tk.CENTER)
            tree.column("Publisher", width=200, anchor=tk.W)
            tree.column("Borrower", width=150, anchor=tk.W)

            tree.heading("#0", text="", anchor=tk.CENTER)
            tree.heading("ISBN", text="ISBN", anchor=tk.CENTER)
            tree.heading("Book_Title", text="Book Title", anchor=tk.CENTER)
            tree.heading("Book_Author", text="Book Author", anchor=tk.CENTER)
            tree.heading("Year_Of_Publication", text="Year of Publication", anchor=tk.CENTER)
            tree.heading("Publisher", text="Publisher", anchor=tk.CENTER)
            tree.heading("Borrower", text="Borrower", anchor=tk.CENTER)

            for row in book_data:
                tree.insert("", tk.END, values=row)

            tree.pack(fill=tk.BOTH, expand=tk.YES, padx=10, pady=10)
            scrollbar.config(command=tree.yview)

            if 'page_buttons_frame' in globals() and page_buttons_frame.winfo_exists(): # type: ignore
                page_buttons_frame.destroy() # type: ignore

            page_buttons_frame = tk.Frame(books_window)
            page_buttons_frame.pack()
            prev_button = tk.Button(page_buttons_frame, text="Previous", state=tk.DISABLED, command=previous_page, bg="#3b3b3b", fg="white")
            prev_button.grid(row=0, column=0, padx=5, pady=5)
            page_label = tk.Label(page_buttons_frame, text="Page {}/{}".format(current_page, total_pages))
            page_label.grid(row=0, column=1, padx=5, pady=5)
            next_button = tk.Button(page_buttons_frame, text="Next", state=tk.DISABLED, command=next_page, bg="#3b3b3b", fg="white")
            next_button.grid(row=0, column=2, padx=5, pady=5)

            if current_page > 1:
                prev_button["state"] = tk.NORMAL

            if current_page < total_pages:
                next_button["state"] = tk.NORMAL

            navigation_frame = ttk.Frame(books_window)
            navigation_frame.pack(pady=10)

        def previous_page():
            global current_page
            if current_page > 1:
                current_page -= 1
                display_books()

        def next_page():
            global current_page, total_pages
            if current_page < total_pages:
                current_page += 1
                display_books()

        def search_books():
            global tree

            search_text = entry_search.get()

            conn = sqlite3.connect('books.db')
            cursor = conn.cursor()
            cursor.execute("SELECT `ISBN`, `Book_Title`, `Book_Author`, `Year_Of_Publication`, `Publisher` FROM books WHERE lower(`Book_Title`) LIKE ? OR lower(`Book_Author`) LIKE ?", ('%' + search_text.lower() + '%', '%' + search_text.lower() + '%'))
            book_data = cursor.fetchall()
            conn.close()

            tree.delete(*tree.get_children()) # type: ignore

            for row in book_data:
                tree.insert("", tk.END, values=row) # type: ignore

        def add_book():
            global tree

            add_book_window = tk.Toplevel(root)
            add_book_window.title("Add Book")

            isbn_label = tk.Label(add_book_window, text="ISBN:")
            isbn_entry = tk.Entry(add_book_window)
            title_label = tk.Label(add_book_window, text="Title:")
            title_entry = tk.Entry(add_book_window)
            author_label = tk.Label(add_book_window, text="Author:")
            author_entry = tk.Entry(add_book_window)
            year_label = tk.Label(add_book_window, text="Year:")
            year_entry = tk.Entry(add_book_window)
            publisher_label = tk.Label(add_book_window, text="Publisher:")
            publisher_entry = tk.Entry(add_book_window)

            isbn_label.grid(row=0, column=0, padx=5, pady=5, sticky=tk.E)
            isbn_entry.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)
            title_label.grid(row=1, column=0, padx=5, pady=5, sticky=tk.E)
            title_entry.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)
            author_label.grid(row=2, column=0, padx=5, pady=5, sticky=tk.E)
            author_entry.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)
            year_label.grid(row=3, column=0, padx=5, pady=5, sticky=tk.E)
            year_entry.grid(row=3, column=1, padx=5, pady=5, sticky=tk.W)
            publisher_label.grid(row=4, column=0, padx=5, pady=5, sticky=tk.E)
            publisher_entry.grid(row=4, column=1, padx=5, pady=5, sticky=tk.W)

            def add_book_to_db():
                isbn = isbn_entry.get()
                title = title_entry.get()
                author = author_entry.get()
                year = year_entry.get()
                publisher = publisher_entry.get()

                if not isbn or not title or not author or not year or not publisher:
                    messagebox.showerror("Error", "All fields are required")
                    return

                conn = sqlite3.connect('books.db')
                cursor = conn.cursor()

                cursor.execute("SELECT * FROM books WHERE `ISBN`=?", (isbn,))
                existing_book = cursor.fetchone()
                if existing_book:
                    messagebox.showerror("Error", "Book with the given ISBN already exists")
                    conn.close()
                    return

                cursor.execute("INSERT INTO books (`ISBN`, `Book_Title`, `Book_Author`, `Year_Of_Publication`, `Publisher`) VALUES (?, ?, ?, ?, ?)",
                    (isbn, title, author, year, publisher))
                conn.commit()
                conn.close()

                isbn_entry.delete(0, tk.END)
                title_entry.delete(0, tk.END)
                author_entry.delete(0, tk.END)
                year_entry.delete(0, tk.END)
                publisher_entry.delete(0, tk.END)

                tree.insert("", tk.END, values=(isbn, title, author, year, publisher, "")) # type: ignore

                messagebox.showinfo("Success", "Book added successfully")

            add_button = tk.Button(add_book_window, text="Add Book", command=add_book_to_db, bg="#3b3b3b", fg="white")
            add_button.grid(row=5, column=0, columnspan=2, padx=5, pady=10)

        def remove_book():
            global tree

            selection = tree.selection() # type: ignore

            if not selection:
                messagebox.showerror("Error", "Please select a book to remove.")
                return

            for item in selection:
                book_values = tree.item(item, 'values') # type: ignore

                if not book_values:
                    continue

                book_id = book_values[0]

                conn = sqlite3.connect('books.db')
                cursor = conn.cursor()

                try:
                    cursor.execute("DELETE FROM books WHERE ISBN=?", (book_id,))
                    conn.commit()

                    tree.delete(item) # type: ignore

                    messagebox.showinfo("Success", "Book removed successfully.")
                except Exception as e:
                    messagebox.showerror("Error", f"An error occurred: {e}")
                    conn.rollback()  # Roll back the changes if an error occurs

                print(cursor.rowcount, "record(s) deleted")

                conn.close()

        def lend_book():
            global tree

            selected_item = tree.selection() # type: ignore
            
            if not selected_item:
                messagebox.showerror("Error", "No book selected.")
                return

            values = tree.item(selected_item)['values'] # type: ignore

            if values[-1]:
                messagebox.showinfo("Information", "The book is already borrowed.")
                return

            borrower_name = simpledialog.askstring("Borrower", "Enter the borrower's name:")
            if not borrower_name:
                return

            conn = sqlite3.connect('books.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE books SET Borrower = ? WHERE ISBN = ?", (borrower_name, values[0]))
            conn.commit()
            conn.close()

            tree.set(selected_item, "Borrower", borrower_name) # type: ignore

        def return_book():
            global tree

            selection = tree.selection() # type: ignore

            if not selection:
                messagebox.showerror("Error", "Please select a book to retrieve.")
                return

            for item in selection:
                book_values = tree.item(item, 'values') # type: ignore

                if not book_values:
                    continue

                book_id = book_values[0]

                if book_values[5] == '':
                    messagebox.showinfo("Information", "The selected book is already retrieved.")
                    continue

                confirmation = messagebox.askyesno("Confirmation", "Are you sure you want to retrieve this book?")

                if confirmation:
                    conn = sqlite3.connect('books.db')
                    cursor = conn.cursor()
                    cursor.execute("UPDATE books SET `Borrower` = '' WHERE `ISBN` = ?", (book_id,))
                    conn.commit()
                    conn.close()

                    tree.set(item, column="Borrower", value='') # type: ignore

                    messagebox.showinfo("Success", "Book retrieved successfully.")

                else:
                    messagebox.showinfo("Information", "Book retrieval canceled.")

        def update_book():
            global tree

            selection = tree.selection() # type: ignore

            if not selection:
                messagebox.showerror("Error", "Please select a book to update.")
                return

            selected_item = selection[0]
            values = tree.item(selected_item, 'values') # type: ignore

            if not values:
                return

            isbn = values[0]

            updated_values = simpledialog.askstring("Update Book", "Enter updated book details (ISBN, Title, Author, Year, Publisher):").split(",") # type:ignore

            if len(updated_values) != 5:
                messagebox.showerror("Error", "Invalid input. Please enter all book details.")
                return

            updated_isbn, title, author, year, publisher = [value.strip() for value in updated_values]

            conn = sqlite3.connect('books.db')
            cursor = conn.cursor()

            cursor.execute("SELECT * FROM books WHERE `ISBN`=? AND `ISBN`!=?", (updated_isbn, isbn))
            existing_book = cursor.fetchone()
            if existing_book:
                messagebox.showerror("Error", "Book with the updated ISBN already exists")
                conn.close()
                return

            cursor.execute("UPDATE books SET `ISBN`=?, `Book_Title`=?, `Book_Author`=?, `Year_Of_Publication`=?, `Publisher`=? WHERE `ISBN`=?",
                        (updated_isbn, title, author, year, publisher, isbn))
            conn.commit()
            conn.close()

            tree.set(selected_item, "ISBN", updated_isbn) # type:ignore
            tree.set(selected_item, "Book_Title", title) # type:ignore
            tree.set(selected_item, "Book_Author", author) # type:ignore
            tree.set(selected_item, "Year_Of_Publication", year) # type:ignore
            tree.set(selected_item, "Publisher", publisher) # type:ignore

            messagebox.showinfo("Success", "Book updated successfully.")

        def smart():
            def search_person():
                person_name = person_name_entry.get()

                conn_books = sqlite3.connect('books.db')
                conn_students = sqlite3.connect('students.db')
                conn_jobs = sqlite3.connect('jobs.db')

                cursor_books = conn_books.cursor()
                cursor_students = conn_students.cursor()
                cursor_jobs = conn_jobs.cursor()

                cursor_books.execute("SELECT Book_Title, Book_Author, Year_Of_Publication, Publisher, Borrower FROM books WHERE UPPER(Borrower) LIKE ?", ('%' + person_name.upper() + '%',))
                results_books = cursor_books.fetchall()

                cursor_students.execute("SELECT name, student_id, password, course, semester, cgpa FROM students WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_students = cursor_students.fetchall()

                cursor_jobs.execute("SELECT Name, Email, Job, Salary FROM salary WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_jobs = cursor_jobs.fetchall()

                if len(results_books) > 0 or len(results_students) > 0 or len(results_jobs) > 0:
                    window = tk.Toplevel(root)
                    window.title("Person Details")

                    window.configure(bg="#3b3b3b")

                    scroll_text = scrolledtext.ScrolledText(window, width=80, height=15)
                    scroll_text.pack(padx=10, pady=10)

                    if len(results_books) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Book Interests:\n\n")
                        for i, row in enumerate(results_books):
                            book_title = row[0]
                            book_author = row[1]
                            year_of_publication = row[2]
                            publisher = row[3]
                            borrower_name = row[4]

                            scroll_text.insert(tk.INSERT, f"Borrower: {borrower_name}\nTitle: {book_title}\nAuthor: {book_author}\nYear of Publication: {year_of_publication}\nPublisher: {publisher}\n\n")

                    if len(results_students) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Student Details:\n\n")
                        for i, row in enumerate(results_students):
                            name = row[0]
                            student_id = row[1]
                            password = row[2]
                            course = row[3]
                            semester = row[4]
                            cgpa = row[5]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nStudent ID: {student_id}\nCourse: {course}\nSemester: {semester}\nCGPA: {cgpa}\n\n")

                    if len(results_jobs) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Worker Details:\n\n")
                        for i, row in enumerate(results_jobs):
                            name = row[0]
                            email = row[1]
                            job = row [2]
                            salary = row[3]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nEmail: {email}\nJob: {job}\nSalary: {salary}\n\n")

                    scroll_text.configure(fg="black", state='disabled')
                else:
                    tk.messagebox.showinfo("No Results", f"No book interests or student details found for {person_name}.") # type: ignore

                conn_books.close()
                conn_students.close()

            # Create the main window
            root = ThemedTk(theme="equilux")  # Use ThemedTk for themed GUI
            root.title("Smart Search")
            root.geometry("200x100")

            # Set the background color
            root.configure(bg="#3b3b3b")

            # Create a label and an entry field for entering the person's name
            person_name_label = tk.Label(root, text="Enter person's name:", bg="#3b3b3b", fg="white")
            person_name_label.pack()

            person_name_entry = tk.Entry(root, fg="black")  # Set foreground color of the entry field to black
            person_name_entry.pack()

            # Create a search button
            button = tk.Button(root, text="Search", command=search_person, bg="#3b3b3b", fg="white")
            button.pack()

            # Start the GUI main loop
            root.mainloop()

        def change_theme():
            global current_theme_index
            current_theme_index = (current_theme_index + 1) % len(themes)
            new_theme = themes[current_theme_index]
            style.theme_use(new_theme)

        button_book_info = ttk.Button(button_frame, text="Book Information", command=display_books)
        button_lend = ttk.Button(button_frame, text="Lend", command=lend_book, width=6)
        button_return = ttk.Button(button_frame, text="Return", command=return_book, width=6)
        button_play = ttk.Button(button_frame, text="Play", command=change_theme, width=6)
        button_add = ttk.Button(button_frame, text="Add", command=add_book, width=6)
        button_update = ttk.Button(button_frame, text="Update", command=update_book, width=6)
        button_remove = ttk.Button(button_frame, text="Remove", command=remove_book, width=6)
        button_search = ttk.Button(button_frame, text="Search", command=search_books)
        entry_search = ttk.Entry(button_frame)
        button_smart = ttk.Button(button_frame, text="[  ]", command=smart, width=6)

        button_book_info.grid(row=1, column=1, padx=(10, 0), pady=(0, 0))
        button_lend.grid(row=0, column=4, padx=(10, 0), pady=(10, 0))
        button_return.grid(row=1, column=4, padx=(10, 0), pady=(0))
        button_play.grid(row=2, column=4, padx=(10, 0), pady=(0, 10))
        button_add.grid(row=0, column=6, padx=(0, 10), pady=(10, 0))
        button_update.grid(row=1, column=6, padx=(0, 10), pady=(0))
        button_remove.grid(row=2, column=6, padx=(0, 10), pady=(0, 10))
        entry_search.grid(row=0, column=1, padx=(10, 0), pady=(5, 0))
        button_search.grid(row=0, column=2, padx=(0, 0), pady=(0, 0))
        button_smart.grid(row=2, column=1, padx=(10, 0), pady=(0, 10), sticky="sw")

        root.mainloop()

    def non_admin_window():
        global current_page, current_theme_index

        # Main window
        root = ThemedTk(theme="equilux")
        root.title("Library Window")
        root.configure(bg="#3b3b3b")

        # Style object
        style = ttk.Style(root)
        style.configure("TLabel", foreground="white", background="#3b3b3b")
        style.configure("TButton", foreground="white", background="#3b3b3b")
        style.configure("TEntry", foreground="white", background="#3b3b3b")

        # Frame for buttons
        button_frame = ttk.Frame(root, padding=20)
        button_frame.pack()

        # Themes
        themes = ['equilux', 'arc', 'plastik', 'adapta', 'scidgrey', 'radiance', 'clearlooks', 'keramik']
        current_theme_index = 0
        style = ThemedStyle(root)
        style.theme_use("equilux")

        # Treeview
        tree = None
        page_size = 50
        current_page = 1
        total_pages = 0

        # DataBase connector
        def display_books():
            global tree, current_page, total_pages, books_window

            if 'books_window' in globals() and books_window.winfo_exists(): # type: ignore
                books_window.destroy() # type: ignore

            books_window = tk.Toplevel(root)
            books_window.title("Book Information")

            conn = sqlite3.connect('books.db')
            cursor = conn.cursor()

            # Get the total number of books
            cursor.execute("SELECT COUNT(*) FROM books")
            total_books = cursor.fetchone()[0]

            # Calculate the total number of pages
            total_pages = (total_books + page_size - 1) // page_size

            # Calculate the start and end index for the current page
            start_index = (current_page - 1) * page_size
            end_index = start_index + page_size

            # Retrieve the books for the current page
            cursor.execute("SELECT * FROM books LIMIT ?, ?", (start_index, page_size))
            book_data = cursor.fetchall()

            conn.close()

            # show all elements in books.db
            book_data = [(book[0], book[1], book[2], book[3], book[4], '') if len(book) == 5 else book for book in book_data]

            # scrollbar
            scrollbar = ttk.Scrollbar(books_window)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

            # treeview widget (main subjects)
            tree = ttk.Treeview(books_window, columns=("ISBN", "Book_Title", "Book_Author", "Year_Of_Publication", "Publisher", "Borrower"), yscrollcommand=scrollbar.set)

            # columns configuration
            tree.column("#0", width=0, stretch=tk.NO)
            tree.column("ISBN", width=100, anchor=tk.CENTER)
            tree.column("Book_Title", width=300, anchor=tk.W)
            tree.column("Book_Author", width=200, anchor=tk.W)
            tree.column("Year_Of_Publication", width=150, anchor=tk.CENTER)
            tree.column("Publisher", width=200, anchor=tk.W)
            tree.column("Borrower", width=150, anchor=tk.W)

            # column headings
            tree.heading("#0", text="", anchor=tk.CENTER)
            tree.heading("ISBN", text="ISBN", anchor=tk.CENTER)
            tree.heading("Book_Title", text="Book Title", anchor=tk.CENTER)
            tree.heading("Book_Author", text="Book Author", anchor=tk.CENTER)
            tree.heading("Year_Of_Publication", text="Year of Publication", anchor=tk.CENTER)
            tree.heading("Publisher", text="Publisher", anchor=tk.CENTER)
            tree.heading("Borrower", text="Borrower", anchor=tk.CENTER)

            # add books to the treeview widget
            for row in book_data:
                tree.insert("", tk.END, values=row)

            # treeview and scrollbar
            tree.pack(fill=tk.BOTH, expand=tk.YES, padx=10, pady=10)
            scrollbar.config(command=tree.yview)

            # create or update the page navigation buttons
            if 'page_buttons_frame' in globals() and page_buttons_frame.winfo_exists(): # type: ignore
                page_buttons_frame.destroy() # type: ignore

            page_buttons_frame = tk.Frame(books_window)
            page_buttons_frame.pack()

            prev_button = tk.Button(page_buttons_frame, text="Previous", state=tk.DISABLED, command=previous_page, bg="#3b3b3b", fg="white")
            prev_button.grid(row=0, column=0, padx=5, pady=5)

            page_label = tk.Label(page_buttons_frame, text="Page {}/{}".format(current_page, total_pages))
            page_label.grid(row=0, column=1, padx=5, pady=5)

            next_button = tk.Button(page_buttons_frame, text="Next", state=tk.DISABLED, command=next_page, bg="#3b3b3b", fg="white")
            next_button.grid(row=0, column=2, padx=5, pady=5)

            if current_page > 1:
                prev_button["state"] = tk.NORMAL

            if current_page < total_pages:
                next_button["state"] = tk.NORMAL

            # navigation frame
            navigation_frame = ttk.Frame(books_window)
            navigation_frame.pack(pady=10)

        # Back function
        def previous_page():
            global current_page
            if current_page > 1:
                current_page -= 1
                display_books()

        # Next function
        def next_page():
            global current_page, total_pages
            if current_page < total_pages:
                current_page += 1
                display_books()

        # Retrive function
        def search_books():
            global tree

            search_text = entry_search.get()

            conn = sqlite3.connect('books.db')
            cursor = conn.cursor()
            cursor.execute("SELECT `ISBN`, `Book_Title`, `Book_Author`, `Year_Of_Publication`, `Publisher` FROM books WHERE lower(`Book_Title`) LIKE ? OR lower(`Book_Author`) LIKE ?", ('%' + search_text.lower() + '%', '%' + search_text.lower() + '%'))
            book_data = cursor.fetchall()
            conn.close()

            # clear treeview widget
            tree.delete(*tree.get_children()) # type: ignore

            # insert filtered book data
            for row in book_data:
                tree.insert("", tk.END, values=row) # type: ignore

        # GUI theme changer
        def change_theme():
            global current_theme_index
            current_theme_index = (current_theme_index + 1) % len(themes)
            new_theme = themes[current_theme_index]
            style.theme_use(new_theme)

        # Create buttons
        button_book_info = ttk.Button(button_frame, text="Book Information", command=display_books)
        button_play = ttk.Button(button_frame, text="Play", command=change_theme, width=6)
        button_search = ttk.Button(button_frame, text="Search", command=search_books)
        entry_search = ttk.Entry(button_frame)

        # Buttons and entry
        button_book_info.grid(row=1, column=1, padx=(10, 0), pady=(0, 0))
        button_play.grid(row=2, column=4, padx=(10, 0), pady=(0, 10))
        entry_search.grid(row=0, column=1, padx=(10, 0), pady=(5, 0))
        button_search.grid(row=0, column=2, padx=(0, 0), pady=(0, 0))

        root.mainloop()

    root = ThemedTk(theme="equilux")
    root.title("Welcome to IFLA")
    root.configure(bg="#3b3b3b")
    style = ttk.Style(root)
    style.configure("TLabel", foreground="white", background="#3b3b3b")
    style.configure("TEntry", foreground="black", background="white")
    style.configure("TButton", foreground="white", background="#3b3b3b")

    login_frame = ttk.Frame(root)
    login_frame.pack(padx=50, pady=50)
    username_label = ttk.Label(login_frame, text="Username:")
    username_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
    username_entry = ttk.Entry(login_frame)
    username_entry.grid(row=0, column=1, padx=5, pady=5)
    password_label = ttk.Label(login_frame, text="Password:")
    password_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")
    password_entry = ttk.Entry(login_frame, show="*")
    password_entry.grid(row=1, column=1, padx=5, pady=5)

    login_button = ttk.Button(login_frame, text="Login", command=login)
    login_button.grid(row=2, column=0, columnspan=2, padx=5, pady=10)
    guest_button = ttk.Button(login_frame, text="Login as Guest", command=non_admin_window)
    guest_button.grid(row=3, column=0, columnspan=2, padx=5, pady=10)

    root.mainloop()

def hea():
    def login():
        username = username_entry.get()
        password = password_entry.get()

        if username == "admin" and password == "12345":
            admin_window()
        elif username != "" and password != "":
            non_admin_window()
        else:
            messagebox.showerror("Error", "Invalid username or password")

    def admin_window():
        # Connect to the SQLite database
        conn = sqlite3.connect('students.db')
        cursor = conn.cursor()

        # Create the students table if it doesn't exist
        cursor.executescript

        def create_student():
            name = name_entry.get()
            student_id = int(student_id_entry.get())
            password = password_entry.get()
            course = course_entry.get()
            semester = semester_entry.get()
            cgpa = float(cgpa_entry.get())

            # Insert a new student into the database
            cursor.execute('INSERT INTO students (name, student_id, password, course, semester, cgpa) VALUES (?, ?, ?, ?, ?, ?)',
                        (name, student_id, password, course, semester, cgpa))
            conn.commit()
            messagebox.showinfo('Success', 'Student created successfully')

        def read_students():
            # Retrieve all students from the database
            cursor.execute('SELECT * FROM students')
            students = cursor.fetchall()
            if students:
                result_text.delete(1.0, tk.END)
                for student in students:
                    result_text.insert(tk.END, f"ID: {student[0]}, Name: {student[1]}, Student ID: {student[2]}, "
                                            f"Password: {student[3]}, Course: {student[4]}, Semester: {student[5]}, "
                                            f"CGPA: {student[6]}\n")
            else:
                messagebox.showinfo('No students found')

        def update_student():
            name = name_entry.get()
            student_id = int(student_id_entry.get())
            password = password_entry.get()
            course = course_entry.get()
            semester = semester_entry.get()
            cgpa = float(cgpa_entry.get())

            # Update an existing student in the database
            cursor.execute('UPDATE students SET name=?, student_id=?, password=?, course=?, semester=?, cgpa=? WHERE id=?',
                        (name, student_id, password, course, semester, cgpa, id))
            conn.commit()
            if cursor.rowcount > 0:
                messagebox.showinfo('Success', 'Student updated successfully')
            else:
                messagebox.showinfo('Error', 'Student not found')

        def delete_student():
            id = int(id_entry.get())

            # Delete a student from the database
            cursor.execute('DELETE FROM students WHERE id=?', (id,))
            conn.commit()
            if cursor.rowcount > 0:
                messagebox.showinfo('Success', 'Student deleted successfully')
            else:
                messagebox.showinfo('Error', 'Student not found')

        def smart():
            def search_person():
                person_name = person_name_entry.get()

                conn_books = sqlite3.connect('books.db')
                conn_students = sqlite3.connect('students.db')
                conn_jobs = sqlite3.connect('jobs.db')

                cursor_books = conn_books.cursor()
                cursor_students = conn_students.cursor()
                cursor_jobs = conn_jobs.cursor()

                cursor_books.execute("SELECT Book_Title, Book_Author, Year_Of_Publication, Publisher, Borrower FROM books WHERE UPPER(Borrower) LIKE ?", ('%' + person_name.upper() + '%',))
                results_books = cursor_books.fetchall()

                cursor_students.execute("SELECT name, student_id, password, course, semester, cgpa FROM students WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_students = cursor_students.fetchall()

                cursor_jobs.execute("SELECT Name, Email, Job, Salary FROM salary WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_jobs = cursor_jobs.fetchall()

                if len(results_books) > 0 or len(results_students) > 0 or len(results_jobs) > 0:
                    window = tk.Toplevel(root)
                    window.title("Person Details")

                    window.configure(bg="#3b3b3b")

                    scroll_text = scrolledtext.ScrolledText(window, width=80, height=15)
                    scroll_text.pack(padx=10, pady=10)

                    if len(results_books) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Book Interests:\n\n")
                        for i, row in enumerate(results_books):
                            book_title = row[0]
                            book_author = row[1]
                            year_of_publication = row[2]
                            publisher = row[3]
                            borrower_name = row[4]

                            scroll_text.insert(tk.INSERT, f"Borrower: {borrower_name}\nTitle: {book_title}\nAuthor: {book_author}\nYear of Publication: {year_of_publication}\nPublisher: {publisher}\n\n")

                    if len(results_students) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Student Details:\n\n")
                        for i, row in enumerate(results_students):
                            name = row[0]
                            student_id = row[1]
                            password = row[2]
                            course = row[3]
                            semester = row[4]
                            cgpa = row[5]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nStudent ID: {student_id}\nCourse: {course}\nSemester: {semester}\nCGPA: {cgpa}\n\n")

                    if len(results_jobs) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Worker Details:\n\n")
                        for i, row in enumerate(results_jobs):
                            name = row[0]
                            email = row[1]
                            job = row [2]
                            salary = row[3]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nEmail: {email}\nJob: {job}\nSalary: {salary}\n\n")

                    scroll_text.configure(fg="black", state='disabled')
                else:
                    tk.messagebox.showinfo("No Results", f"No book interests or student details found for {person_name}.") # type: ignore

                conn_books.close()
                conn_students.close()

            # Create the main window
            root = ThemedTk(theme="equilux")  # Use ThemedTk for themed GUI
            root.title("Smart Search")
            root.geometry("200x100")

            # Set the background color
            root.configure(bg="#3b3b3b")

            # Create a label and an entry field for entering the person's name
            person_name_label = tk.Label(root, text="Enter person's name:", bg="#3b3b3b", fg="white")
            person_name_label.pack()

            person_name_entry = tk.Entry(root, fg="black")  # Set foreground color of the entry field to black
            person_name_entry.pack()

            # Create a search button
            button = tk.Button(root, text="Search", command=search_person, bg="#3b3b3b", fg="white")
            button.pack()

            # Start the GUI main loop
            root.mainloop()

        # Create the main window
        window = tk.Tk()
        window.title('Student Registration System')
        window.configure(bg='light blue')

        name_label = tk.Label(window, text='Name:')
        name_label.grid(row=1, column=0, padx=5, pady=5)
        name_entry = tk.Entry(window)
        name_entry.grid(row=1, column=1, padx=5, pady=5)

        student_id_label = tk.Label(window, text='Student ID:')
        student_id_label.grid(row=2, column=0, padx=5, pady=5)
        student_id_entry = tk.Entry(window)
        student_id_entry.grid(row=2, column=1, padx=5, pady=5)

        password_label = tk.Label(window, text='Password:')
        password_label.grid(row=3, column=0, padx=5, pady=5)
        password_entry = tk.Entry(window, show='*')
        password_entry.grid(row=3, column=1, padx=5, pady=5)

        course_label = tk.Label(window, text='Course:')
        course_label.grid(row=4, column=0, padx=5, pady=5)
        course_entry = tk.Entry(window)
        course_entry.grid(row=4, column=1, padx=5, pady=5)

        semester_label = tk.Label(window, text='Semester:')
        semester_label.grid(row=5, column=0, padx=5, pady=5)
        semester_entry = tk.Entry(window)
        semester_entry.grid(row=5, column=1, padx=5, pady=5)

        cgpa_label = tk.Label(window, text='CGPA:')
        cgpa_label.grid(row=6, column=0, padx=5, pady=5)
        cgpa_entry = tk.Entry(window)
        cgpa_entry.grid(row=6, column=1, padx=5, pady=5)

        # Create buttons
        create_button = tk.Button(window, text='Create', command=create_student)
        create_button.grid(row=7, column=0, padx=5, pady=5)

        read_button = tk.Button(window, text='Display', command=read_students)
        read_button.grid(row=7, column=1, padx=5, pady=5)

        update_button = tk.Button(window, text='Update', command=update_student)
        update_button.grid(row=7, column=2, padx=5, pady=5)

        delete_button = tk.Button(window, text='Delete', command=delete_student)
        delete_button.grid(row=7, column=3, padx=5, pady=5)

        smart_button = tk.Button(window, text="[  ]", command=smart)
        smart_button.grid(row=0, column=3, padx=5, pady=5, sticky="ne")

        # Create a text area to display the result
        result_text = tk.Text(window, width=60, height=10)
        result_text.grid(row=8, columnspan=4, padx=5, pady=5)

        # Run the Tkinter event loop
        window.mainloop()

        # Close the database connection
        conn.close()

    def non_admin_window():
        # Connect to the SQLite database
        conn = sqlite3.connect('students.db')
        cursor = conn.cursor()

        # Create the students table if it doesn't exist
        cursor.executescript

        def read_students():
            # Retrieve all students from the database
            cursor.execute('SELECT * FROM students')
            students = cursor.fetchall()
            if students:
                result_text.delete(1.0, tk.END)
                for student in students:
                    result_text.insert(tk.END, f"ID: {student[0]}, Name: {student[1]}, Student ID: {student[2]}, "
                                            f"Password: {student[3]}, Course: {student[4]}, Semester: {student[5]}, "
                                            f"CGPA: {student[6]}\n")
            else:
                messagebox.showinfo('No students found')

        # Create the main window
        window = tk.Tk()
        window.title('Student Registration System')
        window.configure(bg='light blue')

        read_button = tk.Button(window, text='Display', command=read_students)
        read_button.grid(row=8, padx=5, pady=5)

        # Create a text area to display the result
        result_text = tk.Text(window, width=60, height=10)
        result_text.grid(row=7, columnspan=4, padx=5, pady=5)

        # Run the Tkinter event loop
        window.mainloop()

        # Close the database connection
        conn.close()

    root = tk.Tk()
    root.title("Login Page")
    root.configure(bg="#3b3b3b")

    content_frame = tk.Frame(root, bg="#3b3b3b")
    content_frame.pack(pady=20)
    username_label = tk.Label(content_frame, text="Username:", fg="white", bg="#3b3b3b")
    username_label.grid(row=0, column=0, padx=5, pady=5)
    username_entry = tk.Entry(content_frame, bg="#3b3b3b", fg="white")
    username_entry.grid(row=0, column=1, padx=5, pady=5)
    password_label = tk.Label(content_frame, text="Password:", fg="white", bg="#3b3b3b")
    password_label.grid(row=1, column=0, padx=5, pady=5)
    password_entry = tk.Entry(content_frame, show="*", bg="#3b3b3b", fg="white")
    password_entry.grid(row=1, column=1, padx=5, pady=5)
    button_frame = tk.Frame(root, bg="#3b3b3b")
    button_frame.pack()
    login_button = tk.Button(button_frame, text="Login", command=login, bg="#3b3b3b", fg="white")
    login_button.grid(row=0, column=0, padx=5, pady=10)
    guest_button = tk.Button(button_frame, text="Login as Guest", command=non_admin_window, bg="#3b3b3b", fg="white")
    guest_button.grid(row=0, column=1, padx=5, pady=10)

    root.mainloop()

def work():
    def login():
        username = username_entry.get()
        password = password_entry.get()

        if username == "admin" and password == "12345":
            admin_window()
            
        elif username != "" and password != "":
            non_admin_window()
            root.destroy()
        else:
            messagebox.showerror("Error", "Invalid username or password")

    def admin_window():

        def insert_data():
            name = entry_name.get()
            email = entry_email.get()
            job = entry_job.get()
            salary = entry_salary.get()

            conn = sqlite3.connect("jobs.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO salary (name, email, job, salary) VALUES (?, ?, ?, ?)", (name, email, job, salary))
            conn.commit()
            conn.close()
        
            entry_name.delete(0, tk.END)
            entry_email.delete(0, tk.END)
            entry_job.delete(0, tk.END)
            entry_salary.delete(0, tk.END)

        def display_data():
            conn = sqlite3.connect("jobs.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM salary")
            rows = cursor.fetchall()
            conn.close()

            listbox.delete(0, tk.END)
            for row in rows:
                listbox.insert(tk.END, f"ID: {row[0]}, Name: {row[1]}, Email: {row[2]}, Job: {row[3]}, Salary:{row[4]}")
        
        def update_data():
            selected_item = listbox.curselection()
            if not selected_item:
                return
        
            new_salary = entry_salary.get()
        
            selected_id = listbox.get(selected_item).split(",")[0].split(":")[1].strip()

            conn = sqlite3.connect("jobs.db")
            cursor = conn.cursor()
            cursor.execute("UPDATE salary SET salary=?, WHERE id=?", (new_salary, selected_id))
            conn.commit()
            conn.close()  
        
        def delete_data():
            selected_item = listbox.curselection()
            if not selected_item:
                return
        
            selected_id = listbox.get(selected_item).split(",")[0].split(":")[1].strip()

            conn = sqlite3.connect("jobs.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM salary WHERE id=?", (selected_id))
            conn.commit()
            conn.close()

            display_data()

        def smart():
            def search_person():
                person_name = person_name_entry.get()

                conn_books = sqlite3.connect('books.db')
                conn_students = sqlite3.connect('students.db')
                conn_jobs = sqlite3.connect('jobs.db')

                cursor_books = conn_books.cursor()
                cursor_students = conn_students.cursor()
                cursor_jobs = conn_jobs.cursor()

                cursor_books.execute("SELECT Book_Title, Book_Author, Year_Of_Publication, Publisher, Borrower FROM books WHERE UPPER(Borrower) LIKE ?", ('%' + person_name.upper() + '%',))
                results_books = cursor_books.fetchall()

                cursor_students.execute("SELECT name, student_id, password, course, semester, cgpa FROM students WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_students = cursor_students.fetchall()

                cursor_jobs.execute("SELECT Name, Email, Job, Salary FROM salary WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_jobs = cursor_jobs.fetchall()

                if len(results_books) > 0 or len(results_students) > 0 or len(results_jobs) > 0:
                    window = tk.Toplevel(root)
                    window.title("Person Details")

                    window.configure(bg="#3b3b3b")

                    scroll_text = scrolledtext.ScrolledText(window, width=80, height=15)
                    scroll_text.pack(padx=10, pady=10)

                    if len(results_books) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Book Interests:\n\n")
                        for i, row in enumerate(results_books):
                            book_title = row[0]
                            book_author = row[1]
                            year_of_publication = row[2]
                            publisher = row[3]
                            borrower_name = row[4]

                            scroll_text.insert(tk.INSERT, f"Borrower: {borrower_name}\nTitle: {book_title}\nAuthor: {book_author}\nYear of Publication: {year_of_publication}\nPublisher: {publisher}\n\n")

                    if len(results_students) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Student Details:\n\n")
                        for i, row in enumerate(results_students):
                            name = row[0]
                            student_id = row[1]
                            password = row[2]
                            course = row[3]
                            semester = row[4]
                            cgpa = row[5]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nStudent ID: {student_id}\nCourse: {course}\nSemester: {semester}\nCGPA: {cgpa}\n\n")

                    if len(results_jobs) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Worker Details:\n\n")
                        for i, row in enumerate(results_jobs):
                            name = row[0]
                            email = row[1]
                            job = row [2]
                            salary = row[3]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nEmail: {email}\nJob: {job}\nSalary: {salary}\n\n")

                    scroll_text.configure(fg="black", state='disabled')
                else:
                    tk.messagebox.showinfo("No Results", f"No book interests or student details found for {person_name}.") # type: ignore

                conn_books.close()
                conn_students.close()

            # Create the main window
            root = ThemedTk(theme="equilux")  # Use ThemedTk for themed GUI
            root.title("Smart Search")
            root.geometry("200x100")

            # Set the background color
            root.configure(bg="#3b3b3b")

            # Create a label and an entry field for entering the person's name
            person_name_label = tk.Label(root, text="Enter person's name:", bg="#3b3b3b", fg="white")
            person_name_label.pack()

            person_name_entry = tk.Entry(root, fg="black")  # Set foreground color of the entry field to black
            person_name_entry.pack()

            # Create a search button
            button = tk.Button(root, text="Search", command=search_person, bg="#3b3b3b", fg="white")
            button.pack()

            # Start the GUI main loop
            root.mainloop()

        window = tk.Tk()
        window.title("Indeed")
        window.geometry("700x600")
        window_width = 520
        window_height = 225
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        label_name = tk.Label(window, text="Name:")
        label_name.grid(row=1, column=0)
        entry_name = tk.Entry(window)
        entry_name.grid(row=1, column=1)

        label_email = tk.Label(window, text="Email:")
        label_email.grid(row=2, column=0)
        entry_email = tk.Entry(window)
        entry_email.grid(row=2, column=1)

        label_job = tk.Label(window, text="Job:")
        label_job.grid(row=3, column=0)
        entry_job = tk.Entry(window)
        entry_job.grid(row=3, column=1)

        label_salary = tk.Label(window, text="Salary:")
        label_salary.grid(row=4, column=0)
        entry_salary = tk.Entry(window)
        entry_salary.grid(row=4, column=1)

        button_insert = tk.Button(window, text="Insert", command=insert_data)
        button_insert.grid(row=5, column=0)

        button_display = tk.Button(window, text="Display", command=display_data)
        button_display.grid(row=5, column=1)

        button_update = tk.Button(window, text="Update", command=update_data)
        button_update.grid(row=5, column=2)

        button_delete = tk.Button(window, text="Delete", command=delete_data)
        button_delete.grid(row=5, column=3)

        listbox = tk.Listbox(window, width=60, height=5)
        listbox.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

        smart_button = tk.Button(window, text="[  ]", command=smart)
        smart_button.grid(row=0, column=3, padx=5, pady=5, sticky="ne")

        window.mainloop()

    def non_admin_window():
        def display_data():
            conn = sqlite3.connect("jobs.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM salary")
            rows = cursor.fetchall()
            conn.close()

            listbox.delete(0, tk.END)
            for row in rows:
                listbox.insert(tk.END, f"ID: {row[0]}, Name: {row[1]}, Email: {row[2]}, Job: {row[3]}, Salary:{row[4]}")

        window = tk.Tk()
        window.title("Indeed")
        window.geometry("700x600")
        window_width = 370
        window_height = 125
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        button_display = tk.Button(window, text="Display", command=display_data)
        button_display.grid(row=1,column=0)

        listbox = tk.Listbox(window, width=60, height=5)
        listbox.grid(row=0,column=0)

        window.mainloop()

    root = tk.Tk()
    root.title("Login Menu")
    root.configure(bg="#3b3b3b")

    content_frame = tk.Frame(root, bg="#3b3b3b")
    content_frame.pack(pady=20)
    username_label = tk.Label(content_frame, text="Username:", fg="white", bg="#3b3b3b")
    username_label.grid(row=0, column=0, padx=5, pady=5)
    username_entry = tk.Entry(content_frame, bg="#3b3b3b", fg="white")
    username_entry.grid(row=0, column=1, padx=5, pady=5)
    password_label = tk.Label(content_frame, text="Password:", fg="white", bg="#3b3b3b")
    password_label.grid(row=1, column=0, padx=5, pady=5)
    password_entry = tk.Entry(content_frame, show="*", bg="#3b3b3b", fg="white")
    password_entry.grid(row=1, column=1, padx=5, pady=5)
    button_frame = tk.Frame(root, bg="#3b3b3b")
    button_frame.pack()
    login_button = tk.Button(button_frame, text="Login", command=login, bg="#3b3b3b", fg="white")
    login_button.grid(row=0, column=0, padx=5, pady=10)
    guest_button = tk.Button(button_frame, text="Login as Guest", command=non_admin_window, bg="#3b3b3b", fg="white")
    guest_button.grid(row=0, column=1, padx=5, pady=10)

    root.mainloop()

def onlineshop():
    def login():
        username = username_entry.get()
        password = password_entry.get()

        if username == "admin" and password == "12345":
            admin_window()
        elif username != "" and password != "":
            non_admin_window()
        else:
            messagebox.showerror("Error", "Invalid username or password")

    def admin_window():
        import tkinter

        conn = sqlite3.connect('amazon.db') 
        cursor = conn.cursor() 
        
        def enter_data(): 
            global cursor 
            accepted = accept_var.get() 
            
            if accepted == "Accepted": 
                # User info 
                username = username_entry.get() 
                password = password_entry.get() 
                account_number = account_number_entry.get() 
                online_banking = online_banking_combobox.get() 
                country = country_combobox.get() 
                address = address_entry.get() 
                
                if username and password and account_number and online_banking and country and address: 
                    # Print the entered data 
                    print("Username:", username) 
                    print("Password:", password) 
                    print("Account Number:", account_number) 
                    print("Online Banking:", online_banking) 
                    print("Country:", country) 
                    print("Address:", address) 
                    print("-------------------------------") 
                    
                    # Create Table 
                    conn.execute('''CREATE TABLE IF NOT EXISTS User_Data  
                        (Username TEXT, Password TEXT, AccountNumber TEXT, OnlineBanking TEXT, Country TEXT, Address TEXT) 
                    ''') 
                    
                    # Insert Data  
                    data_insert_query = '''INSERT INTO User_Data (Username, Password, AccountNumber, OnlineBanking, Country, Address)  
                                        VALUES (?, ?, ?, ?, ?, ?)''' 
                    data_insert_tuple = (username, password, account_number, online_banking, country, address) 
                    cursor = conn.cursor() 
                    cursor.execute(data_insert_query, data_insert_tuple) 
                    conn.commit() 
                    
                else: 
                    tkinter.messagebox.showwarning(title="Error", message="All fields are required.") 
            else: 
                tkinter.messagebox.showwarning(title="Error", message="You have not accepted the terms") 
        
        def display_data(): 
            # Function to display the data from the database 
            conn = sqlite3.connect('amazon.db') 
            cursor = conn.cursor() 
            cursor.execute("SELECT * FROM User_Data") 
            rows = cursor.fetchall() 
            display_box.delete(0, "end") 
            for row in rows: 
                display_box.insert("end", str(row)) 
            conn.close() 
        
        def update_data(): 
            # Function to update the data in the database 
            new_username = username_entry.get() 
            new_password = password_entry.get() 
            new_account_number = account_number_entry.get() 
            new_online_banking = online_banking_combobox.get() 
            new_address = address_entry.get() 
            new_country = country_combobox.get() 
        
            conn = sqlite3.connect('amazon.db') 
            cursor = conn.cursor() 
            cursor.execute("UPDATE User_Data SET Username=?, Password=?, AccountNumber=?, OnlineBanking=?, Country=?, Address=? WHERE Address=?",  
            (new_username, new_password, new_account_number, new_online_banking, new_country, new_address))           
            conn.commit() 
            print("Data updated successfully.") 
            conn.close() 
        
        def delete_data(): 
            # Function to delete the data from the database 
            country = country_combobox.get() 
        
            conn = sqlite3.connect('amazon.db') 
            cursor = conn.cursor() 
            cursor.execute("DELETE FROM User_Data WHERE Country=?", (country,)) 
            conn.commit() 
            print("Data deleted successfully.") 
            conn.close() 
            
        def smart():
            def search_person():
                person_name = person_name_entry.get()

                conn_books = sqlite3.connect('books.db')
                conn_students = sqlite3.connect('students.db')
                conn_jobs = sqlite3.connect('jobs.db')

                cursor_books = conn_books.cursor()
                cursor_students = conn_students.cursor()
                cursor_jobs = conn_jobs.cursor()

                cursor_books.execute("SELECT Book_Title, Book_Author, Year_Of_Publication, Publisher, Borrower FROM books WHERE UPPER(Borrower) LIKE ?", ('%' + person_name.upper() + '%',))
                results_books = cursor_books.fetchall()

                cursor_students.execute("SELECT name, student_id, password, course, semester, cgpa FROM students WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_students = cursor_students.fetchall()

                cursor_jobs.execute("SELECT Name, Email, Job, Salary FROM salary WHERE UPPER(name) LIKE ?", ('%' + person_name.upper() + '%',))
                results_jobs = cursor_jobs.fetchall()

                if len(results_books) > 0 or len(results_students) > 0 or len(results_jobs) > 0:
                    window = tk.Toplevel(root)
                    window.title("Person Details")

                    window.configure(bg="#3b3b3b")

                    scroll_text = scrolledtext.ScrolledText(window, width=80, height=15)
                    scroll_text.pack(padx=10, pady=10)

                    if len(results_books) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Book Interests:\n\n")
                        for i, row in enumerate(results_books):
                            book_title = row[0]
                            book_author = row[1]
                            year_of_publication = row[2]
                            publisher = row[3]
                            borrower_name = row[4]

                            scroll_text.insert(tk.INSERT, f"Borrower: {borrower_name}\nTitle: {book_title}\nAuthor: {book_author}\nYear of Publication: {year_of_publication}\nPublisher: {publisher}\n\n")

                    if len(results_students) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Student Details:\n\n")
                        for i, row in enumerate(results_students):
                            name = row[0]
                            student_id = row[1]
                            password = row[2]
                            course = row[3]
                            semester = row[4]
                            cgpa = row[5]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nStudent ID: {student_id}\nCourse: {course}\nSemester: {semester}\nCGPA: {cgpa}\n\n")

                    if len(results_jobs) > 0:
                        scroll_text.insert(tk.INSERT, "________________________________________________________________________________Worker Details:\n\n")
                        for i, row in enumerate(results_jobs):
                            name = row[0]
                            email = row[1]
                            job = row [2]
                            salary = row[3]

                            scroll_text.insert(tk.INSERT, f"Name: {name}\nEmail: {email}\nJob: {job}\nSalary: {salary}\n\n")

                    scroll_text.configure(fg="black", state='disabled')
                else:
                    tk.messagebox.showinfo("No Results", f"No book interests or student details found for {person_name}.") # type: ignore

                conn_books.close()
                conn_students.close()

            # Create the main window
            root = ThemedTk(theme="equilux")  # Use ThemedTk for themed GUI
            root.title("Smart Search")
            root.geometry("200x100")

            # Set the background color
            root.configure(bg="#3b3b3b")

            # Create a label and an entry field for entering the person's name
            person_name_label = tk.Label(root, text="Enter person's name:", bg="#3b3b3b", fg="white")
            person_name_label.pack()

            person_name_entry = tk.Entry(root, fg="black")  # Set foreground color of the entry field to black
            person_name_entry.pack()

            # Create a search button
            button = tk.Button(root, text="Search", command=search_person, bg="#3b3b3b", fg="white")
            button.pack()

            # Start the GUI main loop
            root.mainloop()
            
        window = tkinter.Tk() 
        window.title("Data Entry Form") 
        
        accept_var = tkinter.StringVar(value="Not Accepted")  
        
        frame = tkinter.Frame(window) 
        frame.grid(row=0, column=0, sticky="w", padx=20, pady=10) 
        
        
        # User Details 
        user_frame = tkinter.LabelFrame(frame, text="User Info") 
        user_frame.grid(row= 0, column=0, sticky="w", padx=20, pady=10) 
        
        username_label = tkinter.Label(user_frame, text="Username") 
        username_entry = tkinter.Entry(user_frame) 
        username_label.grid(row=0, column=0, padx=(0, 10)) 
        username_entry.grid(row=0, column=1) 
        
        password_label = tkinter.Label(user_frame, text="Password") 
        password_entry = tkinter.Entry(user_frame)
        password_label.grid(row=1, column=0, padx=(0, 10))
        password_entry.grid(row=1, column=1)

        account_number_label = tkinter.Label(user_frame, text="Account Number")
        account_number_entry = tkinter.Entry(user_frame)
        account_number_label.grid(row=2, column=0, padx=(0, 10))
        account_number_entry.grid(row=2, column=1)

        online_banking_label = tkinter.Label(user_frame, text="Online Banking")
        online_banking_combobox = ttk.Combobox(user_frame,  values=["Affin Bank Berhad", "Alliance Bank Malaysia Berhad", "AmBank (M) Berhad", "CIMB Bank Berhad", "Hong Leong Bank Berhad", "Malayan Banking Berhad", "Public Bank Berhad", "RHB Bank Berhad"])
        online_banking_label.grid(row=0, column=3, padx=(10, 0))
        online_banking_combobox.grid(row=1, column=3, padx=(10, 0))

        user_frame = tkinter.LabelFrame(frame, text="User Info")
        user_frame.grid(row=1, column=0, sticky="w",padx=50, pady=30)

        registered_label = tkinter.Label(user_frame, text="User Status")
        reg_status_var = tkinter.StringVar(value="Not Registered")
        registered_check = tkinter.Checkbutton(user_frame, text="Currently Registered")

        country_label = tkinter.Label(user_frame, text="Country")
        country_combobox = ttk.Combobox(user_frame, values=["Malaysia", "Thailand", "Laos", "Cambodia", "Vietnam", "Philippines", "Brunei Darussalam", "Indonesia", "Singapore", "Myanmar"])
        country_label.grid(row=0, column=1)
        country_combobox.grid(row=1, column=1)

        address_label = tkinter.Label(user_frame, text="Address")
        address_entry = tkinter.Entry(user_frame)
        address_label.grid(row=0, column=2)
        address_entry.grid(row=1, column=2, columnspan=4)

        # Buttons
        button_frame = tkinter.Frame(window)
        button_frame.grid(row=3, column=0, sticky="w", padx=20, pady=10)

        enter_button = tkinter.Button(button_frame, text="Enter Data", command=enter_data)
        enter_button.grid(row=0, column=0, padx=5)

        display_button = tkinter.Button(button_frame, text="Display Data", command=display_data)
        display_button.grid(row=0, column=1, padx=5)

        update_button = tkinter.Button(button_frame, text="Update Data", command=update_data)
        update_button.grid(row=0, column=2, padx=5)

        delete_button = tkinter.Button(button_frame, text="Delete Data", command=delete_data)
        delete_button.grid(row=0, column=3, padx=5)

        smart_search_button = tkinter.Button(button_frame, text="[  ]", command=smart)
        smart_search_button.grid(row=0, column=4, padx=80, pady=10)

        # Accept terms
        terms_frame = tkinter.LabelFrame(frame, text="Terms & Conditions")
        terms_frame.grid(row=2, column=0, sticky="w", padx=20, pady=10)

        accept_var = tkinter.StringVar(value="Not Accepted")
        terms_check = tkinter.Checkbutton(terms_frame, text="I accept the terms and conditions.",
                                        variable=accept_var, onvalue="Accepted", offvalue="Not Accepted")
        terms_check.grid(row=0, column=0)

        # Display Data Box
        display_frame = tkinter.LabelFrame(window, text="Data Display")
        display_frame.grid(row=0, column=1, rowspan=3, sticky="nsew", padx=20, pady=10)
        scrollbar = tkinter.Scrollbar(display_frame)
        scrollbar.pack(side="right", fill="y")

        display_box = tkinter.Listbox(display_frame, yscrollcommand=scrollbar.set, width=100)
        display_box.pack(side="left", fill="both")

        scrollbar.config(command=display_box.yview)

        window.mainloop()

    def non_admin_window():
        import tkinter
        
        conn = sqlite3.connect('amazon.db') 
        cursor = conn.cursor() 
        
        def enter_data(): 
            global cursor 
            accepted = accept_var.get() 
            
            if accepted == "Accepted": 
                # User info 
                username = username_entry.get() 
                password = password_entry.get()         
        
        def display_data(): 
            # Function to display the data from the database 
            conn = sqlite3.connect('amazon.db') 
            cursor = conn.cursor() 
            cursor.execute("SELECT * FROM User_Data") 
            rows = cursor.fetchall() 
            display_box.delete(0, "end") 
            for row in rows: 
                display_box.insert("end", str(row)) 
            conn.close() 
                            
        # Create the main window
        window = tk.Tk()
        window.title("Data Entry Form")

        # Create a StringVar to store the "Accepted" or "Not Accepted" value
        accept_var = tk.StringVar(value="Not Accepted")

        # User Details Frame
        frame = tk.Frame(window)
        frame.grid(row=0, column=0, sticky="w", padx=20, pady=10)

        user_frame = tk.LabelFrame(frame, text="User Info")
        user_frame.grid(row=0, column=0, sticky="w", padx=20, pady=10)

        # Display Data Box
        display_frame = tk.LabelFrame(window, text="Data Display")
        display_frame.grid(row=0, column=1, rowspan=3, sticky="nsew", padx=20, pady=10)

        scrollbar = tk.Scrollbar(display_frame)
        scrollbar.pack(side="right", fill="y")

        display_box = tk.Listbox(display_frame, yscrollcommand=scrollbar.set, width=100)
        display_box.pack(side="left", fill="both", padx=5, pady=5)  # Adding padding around the display box

        scrollbar.config(command=display_box.yview)

        # Buttons Frame
        button_frame = tk.Frame(window)
        button_frame.grid(row=3, column=0, columnspan=2, padx=20, pady=10)

        display_button = tk.Button(button_frame, text="Display Data", command=display_data)
        display_button.grid(row=0, column=0, padx=5)

        window.mainloop()

    root = tk.Tk()
    root.title("Login Page")
    root.configure(bg="#3b3b3b")

    content_frame = tk.Frame(root, bg="#3b3b3b")
    content_frame.pack(pady=20)
    username_label = tk.Label(content_frame, text="Username:", fg="white", bg="#3b3b3b")
    username_label.grid(row=0, column=0, padx=5, pady=5)
    username_entry = tk.Entry(content_frame, bg="#3b3b3b", fg="white")
    username_entry.grid(row=0, column=1, padx=5, pady=5)
    password_label = tk.Label(content_frame, text="Password:", fg="white", bg="#3b3b3b")
    password_label.grid(row=1, column=0, padx=5, pady=5)
    password_entry = tk.Entry(content_frame, show="*", bg="#3b3b3b", fg="white")
    password_entry.grid(row=1, column=1, padx=5, pady=5)
    button_frame = tk.Frame(root, bg="#3b3b3b")
    button_frame.pack()
    login_button = tk.Button(button_frame, text="Login", command=login, bg="#3b3b3b", fg="white")
    login_button.grid(row=0, column=0, padx=5, pady=10)
    guest_button = tk.Button(button_frame, text="Login as Guest", command=non_admin_window, bg="#3b3b3b", fg="white")
    guest_button.grid(row=0, column=1, padx=5, pady=10)

    root.mainloop()

def open_menu():
    global menu_opened
    if not menu_opened:
        menu_opened = True
        program_menu.place(x=310, y=300)  # Adjust the coordinates as needed
    else:
        menu_opened = False
        program_menu.place_forget()

def select_program(event):
    selected_program = program_menu.get()
    if selected_program == "https://www.ifla.org":
        library()  # Show the login page
    elif selected_program == "https://hea.uitm.edu.my":
        hea()
    elif selected_program == "https://www.indeed.com":
        work()
    elif selected_program == "https://www.amazon.com":
        onlineshop()
    else:
        messagebox.showinfo("Program", f"You selected: {selected_program}")
    program_menu.place_forget()
    menu_opened = False

root = tk.Tk()
root.withdraw()

google_page = tk.Tk()
google_page.title("Google")
google_page.geometry("800x600")
google_colors = ['#4285F4', '#DB4437', '#F4B400', '#0F9D58']
google_text = "Google"

for i in range(len(google_text)):
    if google_text[i] == 'G':
        x = 280
    elif google_text[i] == 'e':
        x = 500
    else:
        x = 340 + (i - 1) * 45
    letter_label = tk.Label(google_page, text=google_text[i], font=("Arial", 48), fg=google_colors[i % len(google_colors)])
    letter_label.place(x=x, y=200)

menu_opened = False

program_menu = ttk.Combobox(google_page, width=30)
program_menu['values'] = (
    "https://www.ifla.org",
    "https://hea.uitm.edu.my",
    "https://www.indeed.com",
    "https://www.amazon.com"
)
program_menu.bind("<<ComboboxSelected>>", select_program)

dropdown_button = tk.Button(google_page, text="O", font=("Arial", 7), bg="#4285F4", fg="white", relief=tk.FLAT, command=open_menu)
dropdown_button.place(x=510, y=300)

google_page.mainloop()